import{r as h,a as p}from"./lit-element-JplMEnZc.js";import{x as l,E as v}from"./lit-html-paDGiEfB.js";import{n as f,r as c,t as m}from"./state-_w7_zNwI.js";import{o as d}from"./style-map-C9nPWcxA.js";import{e as u}from"./class-map-D55lQyt8.js";import{C as y}from"./constants-DVLGQE2r.js";const _=`${y}avatar`,b={IMAGE_URL:"image-url",TEXT:"text",LETTER_COUNT:"letter-count"},T={DEFAULT_LETTER_COUNT:2},C={elementName:_,attributes:b,numbers:T},E=':host{display:inline-block}:host([hidden]){display:none}.forge-avatar{--_avatar-size: var(--forge-avatar-size, 40px);--_avatar-background: var(--forge-avatar-background, var(--forge-theme-tertiary, #3d5afe));--_avatar-color: var(--forge-avatar-color, var(--forge-theme-on-tertiary, #ffffff));--_avatar-transition-duration: var(--forge-avatar-transition-duration, var(--forge-animation-duration-short4, .2s));--_avatar-transition-timing: var(--forge-avatar-transition-timing, var(--forge-animation-easing-standard, cubic-bezier(.2, 0, 0, 1)));--_avatar-shape: var(--forge-avatar-shape, calc(var(--forge-shape-round, 50%) * var(--forge-shape-factor, 1)))}.forge-avatar{display:flex;align-items:center;justify-content:center;overflow:hidden;transition:height var(--_avatar-transition-duration) var(--_avatar-transition-timing),width var(--_avatar-transition-duration) var(--_avatar-transition-timing);border-radius:var(--_avatar-shape);box-sizing:border-box;width:var(--_avatar-size);height:var(--_avatar-size);background-color:var(--_avatar-background);background-position:center;background-repeat:no-repeat;background-size:cover;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:var(--forge-typography-subheading2-font-family, var(--forge-typography-font-family, "Roboto", sans-serif));font-size:var(--forge-typography-subheading2-font-size, calc(var(--forge-typography-font-size, 1rem) * var(--forge-typography-subheading2-font-size-scale, 1)));font-weight:var(--forge-typography-subheading2-font-weight, 400);line-height:var(--forge-typography-subheading2-line-height, calc(var(--forge-typography-font-size, 1rem) * var(--forge-typography-subheading2-line-height-scale, 1.25)));letter-spacing:var(--forge-typography-subheading2-letter-spacing, normal);text-transform:var(--forge-typography-subheading2-text-transform, inherit);text-decoration:var(--forge-typography-subheading2-text-decoration, inherit);color:var(--_avatar-color)}.forge-avatar .image{background-color:inherit}';var U=Object.defineProperty,z=Object.getOwnPropertyDescriptor,i=(r,t,n,o)=>{for(var a=o>1?void 0:o?z(t,n):t,s=r.length-1,g;s>=0;s--)(g=r[s])&&(a=(o?g(t,n,a):g(a))||a);return o&&a&&U(t,n,a),a};const w=(r,t)=>t===1?r[0].toUpperCase():((r==null?void 0:r.match(/\S+/g))??[]).slice(0,t).reduce((o,a)=>o+=a[0].toUpperCase(),"");let e=class extends p{constructor(){super(...arguments),this.text="",this.letterCount=C.numbers.DEFAULT_LETTER_COUNT,this.imageUrl=""}willUpdate(r){r.has("imageUrl")&&this._tryLoadImage()}render(){return l`
      <div
        aria-hidden="true"
        part="root"
        class=${u({"forge-avatar":!0,image:!!this._image})}
        style=${this._image?d({backgroundImage:`url(${this._image.src})`}):v}>
        <slot>${this.text?w(this.text,this.letterCount):v}</slot>
      </div>
    `}async _tryLoadImage(){if(this.imageUrl){const r=new Image;r.onload=()=>this._image=r,r.onerror=()=>this._image=void 0,r.src=this.imageUrl}else this._image=void 0}};e.styles=h(E);i([f({type:String,reflect:!0})],e.prototype,"text",2);i([f({type:Number,reflect:!0,attribute:"letter-count"})],e.prototype,"letterCount",2);i([f({type:String,reflect:!0,attribute:"image-url"})],e.prototype,"imageUrl",2);i([c()],e.prototype,"_image",2);e=i([m("forge-avatar")],e);export{C as A};
