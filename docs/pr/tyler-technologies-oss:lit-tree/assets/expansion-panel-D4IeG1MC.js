import{C as g,l as h,j as E,B as N,k as u}from"./constants-BjnHqKgS.js";import{B as T,c}from"./base-adapter-CQdYccXX.js";import{c as y}from"./feature-detection-ONR9WHvu.js";import{O as m}from"./open-icon-BJwmkNNX.js";const d=`${g}expansion-panel`,_={OPEN:"open",ORIENTATION:"orientation",ANIMATION_TYPE:"animation-type"},b={..._,OPENING:"opening"},f={HIDDEN:"hidden"},O={HEADER:".header",CONTENT:".content",INNER:".inner",IGNORE:":is([data-forge-ignore],[forge-ignore])",OPEN_ICON:`:is([slot=header] ${m.elementName}, ${m.elementName}[slot^=header])`},v={TOGGLE:`${d}-toggle`,ANIMATION_COMPLETE:`${d}-animation-complete`},e={elementName:d,observedAttributes:_,attributes:b,classes:f,selectors:O,events:v},A=Symbol("emulateUserToggle");class I extends T{constructor(t){super(t),this._transitionStartListener=this._onTransitionStart.bind(this),this._transitionEndListener=this._onTransitionEnd.bind(this),this._headerElement=h(this._component,e.selectors.HEADER),this._contentElement=h(this._component,e.selectors.CONTENT),this._innerElement=h(this._component,e.selectors.INNER)}setAnimationCompleteListener(t){this._transitionCompleteListener=t,this._contentElement.addEventListener("transitionstart",this._transitionStartListener),this._contentElement.addEventListener("transitionend",this._transitionEndListener)}addHeaderListener(t,n){this._headerElement.addEventListener(t,n)}tryToggleOpenIcon(t){const n=this._component.querySelector(e.selectors.OPEN_ICON);n&&(n.open=t)}setContentVisibility(t){this._contentElement.classList.toggle(e.classes.HIDDEN,!t)}_onTransitionStart(t){t.propertyName.startsWith("grid-template")&&this.toggleHostAttribute(e.attributes.OPENING,!0)}_onTransitionEnd(t){t.propertyName.startsWith("grid-template")&&(this.toggleHostAttribute(e.attributes.OPENING,!1),this._transitionCompleteListener())}animationStart(){this._innerElement.style.overflow="hidden"}animationEnd(){this._innerElement.style.removeProperty("overflow")}}class C{constructor(t){this._adapter=t,this._open=!1,this._orientation="vertical",this._animationType="default",this._clickListener=this._onClick.bind(this),this._keydownListener=this._onKeydown.bind(this),this._animationCompleteListener=this._onAnimationComplete.bind(this)}initialize(){this._adapter.addHeaderListener("click",this._clickListener),this._adapter.addHeaderListener("keydown",this._keydownListener),this._adapter.setAnimationCompleteListener(this._animationCompleteListener)}_onClick(t){t.composedPath().find(o=>o.nodeType===Node.ELEMENT_NODE&&o.matches(e.selectors.IGNORE))||(t.stopPropagation(),this._toggle(),this.dispatchToggleEvent())}_onKeydown(t){(t.key===" "||t.key==="Enter")&&(t.stopPropagation(),t.preventDefault(),this._toggle(),this.dispatchToggleEvent())}_onAnimationComplete(){this._open?this._animationType!=="none"&&this._adapter.animationEnd():this._adapter.setContentVisibility(!1),this._adapter.dispatchHostEvent(new CustomEvent(e.events.ANIMATION_COMPLETE,{detail:this._open}))}_togglePanel(){this._adapter.toggleHostAttribute(e.attributes.OPEN,this._open),this._adapter.tryToggleOpenIcon(this._open),this._open&&(this._animationType!=="none"&&this._adapter.animationStart(),this._adapter.setContentVisibility(!0))}dispatchToggleEvent(){const t=new CustomEvent(e.events.TOGGLE,{detail:this._open,bubbles:!0,composed:!0});this._adapter.dispatchHostEvent(t)}_toggle(){this.open=!this.open}get open(){return this._open}set open(t){t=!!t,this._open!==t&&(this._open=t,this._togglePanel())}get orientation(){return this._orientation}set orientation(t){this._orientation!==t&&(this._orientation=t,this._adapter.setHostAttribute(e.attributes.ORIENTATION,this._orientation))}get animationType(){return this._animationType}set animationType(t){this._animationType!==t&&(this._animationType=t,this._adapter.setHostAttribute(e.attributes.ANIMATION_TYPE,this._animationType))}}const P=`<template>
  <div class="forge-expansion-panel" part="root">
    <div class="header" part="header">
      <slot name="header"></slot>
    </div>
    <div class="content hidden" part="content">
      <div class="inner">
        <slot></slot>
      </div>
    </div>
  </div>
</template>
`,L=":host{display:block}:host([hidden]){display:none}.forge-expansion-panel{--_expansion-panel-animation-duration: var(--forge-expansion-panel-animation-duration, var(--forge-animation-duration-medium4, .4s));--_expansion-panel-animation-easing: var(--forge-expansion-panel-animation-easing, var(--forge-animation-easing-standard, cubic-bezier(.2, 0, 0, 1)))}.header{outline:none;-webkit-tap-highlight-color:transparent;cursor:pointer}.content{display:grid;grid-template-rows:0fr;transition-property:visibility,opacity,grid-template-rows;transition-duration:var(--_expansion-panel-animation-duration);transition-timing-function:var(--_expansion-panel-animation-easing);min-height:0;opacity:0}.content .inner{display:grid;grid-template-rows:1fr}.hidden{visibility:hidden}@media (prefers-reduced-motion: reduce){.content{transition:none}}:host(:not([open])) .inner{overflow:hidden}:host([open]) .content{opacity:1}:host([open]:is(:not([orientation]),[orientation=vertical])) .content{grid-template-rows:1fr}:host([open][orientation=horizontal]) .content{grid-template-columns:1fr}:host([orientation=horizontal]) .forge-expansion-panel{display:grid;grid-template-columns:auto 1fr}:host([orientation=horizontal]) .content{transition-property:opacity,grid-template-columns;grid-template-rows:none;grid-template-columns:0fr}:host([animation-type=none]) .content{transition:none}";var w=Object.defineProperty,x=Object.getOwnPropertyDescriptor,r=(i,t,n,o)=>{for(var s=o>1?void 0:o?x(t,n):t,p=i.length-1,l;p>=0;p--)(l=i[p])&&(s=(o?l(t,n,s):l(s))||s);return o&&s&&w(t,n,s),s};let a=class extends N{static get observedAttributes(){return Object.values(e.observedAttributes)}constructor(){super(),u(this,P,L),this._core=new C(new I(this))}connectedCallback(){this._core.initialize()}attributeChangedCallback(i,t,n){switch(i){case e.observedAttributes.OPEN:this.open=y(n);break;case e.observedAttributes.ORIENTATION:this.orientation=n;break;case e.observedAttributes.ANIMATION_TYPE:this.animationType=n;break}}toggle(){this.open=!this.open}[A](i){this.open!==i&&(this.open=i,this._core.dispatchToggleEvent())}};r([c()],a.prototype,"open",2);r([c()],a.prototype,"orientation",2);r([c()],a.prototype,"animationType",2);a=r([E({name:e.elementName})],a);export{e as E,a,A as e};
