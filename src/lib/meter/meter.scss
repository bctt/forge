@use '../core/styles/shape';
@use '../core/styles/spacing';
@use './core';

//
// Host
//

:host {
  @include core.host;
}

//
// Base
//

.forge-meter {
  @include core.tokens;
}

.forge-meter {
  @include core.base;

  &--segmented {
    @include core.base-segmented;

    .bar {
      @include core.bar-normal;

      &--low {
        @include core.bar-low;
      }

      &--high {
        @include core.bar-high;
      }
    }
  }
}

.bar {
  @include core.bar;
}

//
// Density
//

@each $key, $value in ('small': 'xsmall', 'medium': 'medium', 'large': 'large') {
  :host([density='#{$key}']) {
    .forge-meter {
      @include core.override(height, spacing.variable($value), value);
    }
  }
}

//
// Shape
//

@each $key, $value in ('default': shape.variable(medium), 'rounded': shape.variable(full), 'squared': 0) {
  :host([shape='#{$key}']) {
    .forge-meter {
      @include core.override(shape, $value, value);
    }
  }
}

//
// Theme
//

:host([muted]) {
  .forge-meter {
    @include core.override(background, var(--forge-theme-primary-container-minimum), value);
    @include core.override(color, var(--forge-theme-primary-container-high), value);

    &--segmented {
      @include core.override(background, var(--forge-theme-surface-container-minimum), value);

      .bar {
        background: var(--forge-theme-warning-container-high);

        &--low {
          background: var(--forge-theme-error-container-high);
        }

        &--high {
          background: var(--forge-theme-success-container-high);
        }
      }
    }
  }
}

@each $value in ('primary', 'secondary', 'tertiary', 'success', 'warning', 'error', 'info') {
  :host([theme='#{$value}']:not([muted])) {
    .forge-meter:not(.forge-meter--segmented) {
      @include core.override(background, var(--forge-theme-#{$value}-container-low), value);
      @include core.override(color, var(--forge-theme-#{$value}), value);
    }
  }

  :host([theme='#{$value}'][muted]) {
    .forge-meter:not(.forge-meter--segmented) {
      @include core.override(background, var(--forge-theme-#{$value}-container-minimum), value);
      @include core.override(color, var(--forge-theme-#{$value}-container-high), value);
    }
  }
}
